#!/bin/sh

set -e

echo "Running pre push hook!"
repository_path=$(git rev-parse --show-toplevel)
tag_name=$(git tag --points-at=HEAD | head -n 1)

[ -n "$tag_name" ] && {
    echo "Current reference has the following tag: ${tag_name}"
    dialog --defaultno --yesno "Are you pushing a tag ?" 20 60 && {
        echo "Checking tag name.."
        # Check if tag follows our semver convention
        # MAJOR.MINOR.PATCH or MAJOR.MINOR.PATCH-SOMETHING.VERSION
        $(echo "$tag_name" | grep -Po "^\d+\.\d+\.\d+(\-[A-z]+\.\d+)?$|^\d+\.\d+\.\d+$" > /dev/null) || {
            echo "Invalid tag name!"
            exit 1
        }
        echo "Tag name is valid, congratulations for the new release!"
    }
}

echo "Running shellcheck..."
#SC2005: Allow us to break line while running command
#SC2015: Allow us to use short circuit
#SC2046: Allow word splitting
#SC2048: Allow word splitting
#SC2086: Allow word splitting
git ls-files '*.sh' | xargs --max-lines=1 shellcheck --exclude=SC2005,SC2015,SC2046,SC2048,SC2086

echo "Running isort.."
# Run isort for each python project
dirname $(git ls-files "$repository_path/*/setup.py") | xargs -I {} isort --src-path="{}" --check-only --diff "{}"

# This will only get the python files track by git, not including submodules
python_files=$(git ls-files '*.py')

echo "Running black.."
black --check --diff $python_files

# Faster than pylint to check for issues
echo "Running ruff.."
ruff $python_files

echo "Running pylint.."
pylint $python_files

echo "Running pytest.."
pytest --cov="$repository_path" --cov-report html

echo "Running mypy.."
git ls-files '*.py' | xargs --max-lines=1 mypy --no-incremental

exit 0
